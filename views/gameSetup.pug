extends statsBase

block content
  .container.game-setup-container
    h1 Game Setup

    // Form for creating or updating game setup
    form#gameSetupForm(action="/api/v1/gameSetups", method="POST", enctype="application/json")
      // Two-column layout for the form
      .form-section.two-column-layout
        // Names and description section
        .names-section.form-section
          h2 Game Info
          label(for="oppositionName") Opposition Name:
          input(type="text", name="oppositionName", value=gameSetup && gameSetup.oppositionName, required)

          label(for="gameDescription") Game Description:
          textarea(name="gameDescription", rows="2", required)= gameSetup && gameSetup.gameDescription

      // squad and player selection section
      .squad-player-section.form-section
        h2 Squad and Player Selection
        label(for="selectedTeam") Select Your Squad:
        select#selectedTeam(name="selectedTeam")
          option(value="") -- Select Squad --
          each squad in squads
            option(value=squad._id)= squad.name
        // div to display the squad selection error
        div.error-message(id="squadError", style="display: none; color: red; margin-top: 5px;")
          Please select a squad.

        // virtual scroller for player selection
        .players-list
          each position in playerPositions
            .player-setup-item(data-position=position)
              // display the selected player's position and dropdown in a flexbox
              .player-info
                span.selected-player-position Position: #{position}
                select.custom-dropdown(id=`selectedPlayer_${position}`, onchange="selectPlayer(event)")
                  option(value="", disabled, selected) -- Select Player --
                  each player in players
                    option(value=player._id, data-playername=`${player.firstName} ${player.lastName}`)= `${player.firstName} ${player.lastName}`
                input(type="hidden", class="playerId", id=`playerId_${position}`, value="")
                input(type="hidden", class="playerName", id=`playerName_${position}`, value="")
                label(for=`playerNumber_${position}`) Player Number (1-30)
                input(type="number", class="playerNumber", id=`playerNumber_${position}`, name="playerNumber", min="1", max="30", placeholder="Player Number")

              // display the selected player's name
              .selected-player-container
                span.selected-player-name(data-position=position) -- Select Player --

        // save button moved to the bottom of this section
        .button-container
          button.save-button(type="submit") Save Game Setup

        // hidden input field for playerSetup data
        input(type="hidden", name="playerSetup", id="playerSetup", value="")

  // script section
  block scripts
    // Pass the squads data to the updatePlayersDropdown function
    script.
      const squads = !{JSON.stringify(squads)}; // convert the squads object to a JavaScript variable

      async function updatePlayersDropdown() {
        const selectedSquadId = document.querySelector("#selectedTeam").value;
        console.log("Selected Squad ID:", selectedSquadId); // log the selected squad ID

        const playerDropdowns = document.querySelectorAll('.custom-dropdown');
        playerDropdowns.forEach((dropdown) => {
          dropdown.querySelectorAll('option').forEach((option, index) => {
            if (index === 0) {
              option.textContent = "-- Select Player --";
              option.selected = true; // "-- Select Player --" option by default in dropdown menu
            } else {
              option.style.display = "none"; // hide all other player options
            }
          });
        });

        if (selectedSquadId) {
          try {
            // get the players associated with the selected squad
            const response = await fetch(`/api/v1/players?squad=${selectedSquadId}`);
            const playersData = await response.json();

            // add players to the respective player dropdowns
            playerDropdowns.forEach((dropdown) => {
              playersData.data.players.forEach((player) => {
                const fullName = `${player.firstName} ${player.lastName}`;
                const option = new Option(fullName, player._id, false, false);
                option.dataset.playername = fullName; // save player's full name 
                dropdown.add(option); // append options to the correct dropdown
              });
            });
          } catch (error) {
            console.error("Error fetching players:", error);
          }
        }
      }

      // custom dropdown function
      function selectPlayer(event) {
        const selectedPlayer = event.target.value;
        const position = event.target.closest('.player-setup-item').getAttribute('data-position');

        const selectedPlayerDisplay = document.querySelector(`.selected-player-name[data-position="${position}"]`);
        const playerNumberInput = document.querySelector(`#playerNumber_${position}`);

        // show the placeholder option and hide the selected player's option
        const playerOptions = event.target.querySelectorAll('option');
        playerOptions.forEach((option) => {
          if (option.value === selectedPlayer) {
            option.style.display = 'none'; // hide the selected player's option
          } else {
            option.style.display = 'block'; // show all other player options
          }
        });

        // update the selected player's name display
        if (selectedPlayer) {
          const selectedPlayerOption = event.target.options[event.target.selectedIndex];
          const selectedPlayerName = selectedPlayerOption.dataset.playername;
          selectedPlayerDisplay.textContent = selectedPlayerName;
        } else {
          selectedPlayerDisplay.textContent = "-- Select Player --";
        }

        // store the selected player's ID and name in hidden input fields
        document.querySelector(`#playerId_${position}`).value = selectedPlayer;
        document.querySelector(`#playerName_${position}`).value = selectedPlayerDisplay.textContent;

        // update the player number
        playerNumberInput.value = selectedPlayer ? selectedPlayerOption.dataset.playernumber : '';

        // log the selected player's ID and name
        console.log(`Selected Player ID for position ${position}:`, selectedPlayer);
        console.log(`Selected Player Name for position ${position}:`, selectedPlayerDisplay.textContent);
        console.log(`Selected Player Number for position ${position}:`, playerNumberInput.value);
      }

      // add event listener to the squad dropdown
      document.querySelector("#selectedTeam").addEventListener("change", updatePlayersDropdown);

      // manually trigger the change event to populate player dropdowns on initial load
      document.querySelector("#selectedTeam").dispatchEvent(new Event("change"));

      // collect playerSetup data
      function collectPlayerSetup() {
        const playerSetup = [];
        const playerItems = document.querySelectorAll(".player-setup-item");

        playerItems.forEach((item) => {
          const position = item.getAttribute("data-position");
          const playerId = document.querySelector(`#playerId_${position}`).value;
          const playerName = document.querySelector(`#playerName_${position}`).value;
          const playerNumber = document.querySelector(`#playerNumber_${position}`).value;

          if (playerId && playerName && playerNumber) {
            playerSetup.push({ position, playerId, playerName, playerNumber });
          }
        });

        return playerSetup;
      }

      // add event listener to the form's submit event
      document.querySelector("#gameSetupForm").addEventListener("submit", async (event) => {
        event.preventDefault(); // prevents default submit

        // check if a squad has been selected
        const selectedSquad = document.querySelector("#selectedTeam").value;
        if (!selectedSquad) {
          const squadError = document.querySelector("#squadError");
          squadError.style.display = "block"; // show the error message
          return; 
        }

        // collect the playerSetup data
        const playerSetup = collectPlayerSetup();

        // update the value of the hidden input field with the collected playerSetup data
        document.querySelector("#playerSetup").value = JSON.stringify(playerSetup);

        try {
          // submit the form using fetch API POST req
          const response = await fetch("/api/v1/gameSetups", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              oppositionName: document.querySelector("input[name='oppositionName']").value,
              gameDescription: document.querySelector("textarea[name='gameDescription']").value,
              selectedTeam: document.querySelector("#selectedTeam").value,
              playerSetup: JSON.stringify(playerSetup),
            }),
          });

          if (response.ok) {
            // if the form submission is successful, redirect to the Record Game page
            window.location.href = "/recordGames";
          } else {
            // if the form submission fails, display an error message to the user
            console.error("Failed to save game setup.");
          }
        } catch (error) {
          console.error("Error submitting form:", error);
        }
      });
